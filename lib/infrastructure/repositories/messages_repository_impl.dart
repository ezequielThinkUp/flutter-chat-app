import 'package:chat/domain/repositories/messages_repository.dart';
import 'package:chat/domain/datasources/messages_datasource.dart';
import 'package:chat/domain/entities/message.dart';

/// Implementaci√≥n del repositorio de mensajes.
///
/// Orquesta las operaciones entre diferentes DataSources
/// y aplica l√≥gica de negocio adicional.
class MessagesRepositoryImpl implements MessagesRepository {
  final MessagesDataSource _messagesDataSource;

  MessagesRepositoryImpl(this._messagesDataSource);

  @override
  Future<List<Message>> getMessagesBetweenUsers({
    required String usuario1,
    required String usuario2,
    int? limite,
    int? offset,
  }) async {
    try {
      print('üîÑ Repositorio: Obteniendo mensajes entre usuarios');

      final mensajes = await _messagesDataSource.getMessagesBetweenUsers(
        usuario1: usuario1,
        usuario2: usuario2,
        limite: limite,
        offset: offset,
      );

      // Ordenar mensajes por timestamp (m√°s recientes primero)
      mensajes.sort((a, b) => b.timestamp.compareTo(a.timestamp));

      print('‚úÖ Repositorio: ${mensajes.length} mensajes obtenidos y ordenados');
      return mensajes;
    } catch (e) {
      print('‚ùå Repositorio: Error obteniendo mensajes: $e');
      rethrow;
    }
  }

  @override
  Future<Message?> getLastMessage({
    required String usuario1,
    required String usuario2,
  }) async {
    try {
      print('üîÑ Repositorio: Obteniendo √∫ltimo mensaje');

      final mensaje = await _messagesDataSource.getLastMessage(
        usuario1: usuario1,
        usuario2: usuario2,
      );

      if (mensaje != null) {
        print('‚úÖ Repositorio: √öltimo mensaje obtenido: ${mensaje.content}');
      } else {
        print('‚ÑπÔ∏è Repositorio: No hay mensajes entre estos usuarios');
      }

      return mensaje;
    } catch (e) {
      print('‚ùå Repositorio: Error obteniendo √∫ltimo mensaje: $e');
      rethrow;
    }
  }

  @override
  Future<List<Message>> getUnreadMessages(String usuarioId) async {
    try {
      print(
          'üîÑ Repositorio: Obteniendo mensajes no le√≠dos para usuario: $usuarioId');

      final mensajes = await _messagesDataSource.getUnreadMessages(usuarioId);

      // Filtrar mensajes que realmente son para este usuario
      final mensajesFiltrados =
          mensajes.where((mensaje) => mensaje.receiverId == usuarioId).toList();

      print(
          '‚úÖ Repositorio: ${mensajesFiltrados.length} mensajes no le√≠dos obtenidos');
      return mensajesFiltrados;
    } catch (e) {
      print('‚ùå Repositorio: Error obteniendo mensajes no le√≠dos: $e');
      rethrow;
    }
  }

  @override
  Future<bool> markMessageAsRead(String mensajeId) async {
    try {
      print('üîÑ Repositorio: Marcando mensaje como le√≠do: $mensajeId');

      final resultado = await _messagesDataSource.markMessageAsRead(mensajeId);

      if (resultado) {
        print('‚úÖ Repositorio: Mensaje marcado como le√≠do exitosamente');
      } else {
        print('‚ö†Ô∏è Repositorio: No se pudo marcar el mensaje como le√≠do');
      }

      return resultado;
    } catch (e) {
      print('‚ùå Repositorio: Error marcando mensaje como le√≠do: $e');
      rethrow;
    }
  }

  @override
  Future<bool> markMessageAsDelivered(String mensajeId) async {
    try {
      print('üîÑ Repositorio: Marcando mensaje como entregado: $mensajeId');

      final resultado =
          await _messagesDataSource.markMessageAsDelivered(mensajeId);

      if (resultado) {
        print('‚úÖ Repositorio: Mensaje marcado como entregado exitosamente');
      } else {
        print('‚ö†Ô∏è Repositorio: No se pudo marcar el mensaje como entregado');
      }

      return resultado;
    } catch (e) {
      print('‚ùå Repositorio: Error marcando mensaje como entregado: $e');
      rethrow;
    }
  }
}
