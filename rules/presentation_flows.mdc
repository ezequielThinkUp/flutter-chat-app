# üñ•Ô∏è Regla ‚Äì Flujos de Presentaci√≥n (Flows)

**Aplica a:**
- `lib/presentation/flows/**/*.dart` - Todos los archivos de flujos de presentaci√≥n

Esta regla gu√≠a la estructura completa de un flujo de UI. Cada flujo debe organizarse por feature e incluir pantalla, notifier, provider, state, action y widgets espec√≠ficos.

---

## ‚úÖ Organizaci√≥n por flujo

Cada carpeta dentro de `lib/presentation/flows/` debe contener:

- Una `Screen` que extienda `BaseStatefulWidget`
- El primer widget de la `Screen` debe ser `ContentStateWidget` ubicado en: `lib/presentation/base/content_state/content_state_widget.dart`
- Un `Notifier` que extienda `BaseStateNotifier<State, Action>`
- Un `Provider` con `BaseProvider<Notifier, State>`
- Archivo `state.dart` para el estado del flujo
- Archivo `action.dart` con la sealed class de acciones
- Widgets espec√≠ficos y archivo barril (`widgets.dart`, etc.)

---

## ‚úÖ Pantallas

Usar siempre `BaseStatefulWidget` como clase base. Esto garantiza suscripciones autom√°ticas a navegaci√≥n y alertas desde el notifier.

```dart
abstract class BaseStatefulWidget<T extends ConsumerStatefulWidget>
    extends ConsumerState<T> with BaseScreen {
  Widget buildView(BuildContext context);

  @override
  Widget build(BuildContext context) {
    subscribeAlert(ref: ref);
    subscribeNavigation(
      ref: ref,
      context: context,
    );
    return buildView(context);
  }
}
```

### Ejemplo de pantalla

```dart
class LoginScreen extends ConsumerStatefulWidget {
  const LoginScreen({super.key});
  
  @override
  ConsumerState<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends BaseStatefulWidget<LoginScreen> {
  @override
  Widget buildView(BuildContext context) {
    final state = ref.watch(loginProvider);
    return ContentStateWidget(
      state: state,
      child: Column(
        children: [
          Text(state.email),
          // ...
        ],
      ),
    );
  }
}
```

---

## üö¶ Navegaci√≥n

Cada flujo debe tener su propia configuraci√≥n de rutas siguiendo este patr√≥n:

```dart
class HomeRouter {
  static const String homeRouteName = 'Home';

  static GoRoute getRoute() {
    return GoRoute(
      name: homeRouteName,
      path: '/Home',
      pageBuilder: (context, state) => MaterialPage<void>(
        key: state.pageKey,
        child: HomeScreen(),
        name: homeRouteName,
      ),
      routes: [SettingsRouter.getRoute()], // Sub-rutas si aplica
    );
  }
}
```

**üìÅ Ubicaci√≥n del archivo:**
`lib/presentation/flows/{feature}/nav/{feature}_route.dart`

---

## üèóÔ∏è Estructura de Estado y Acciones

### Estado del flujo:
```dart
// lib/presentation/flows/{feature}/state.dart
class LoginState extends BaseState {
  final String email;
  final String password;
  final bool isLoading;
  
  const LoginState({
    required this.email,
    required this.password,
    required this.isLoading,
    super.status = BaseStatus.initial,
    super.message,
  });

  @override
  LoginState copyWith({
    String? email,
    String? password,
    bool? isLoading,
    BaseStatus? status,
    String? message,
  }) {
    return LoginState(
      email: email ?? this.email,
      password: password ?? this.password,
      isLoading: isLoading ?? this.isLoading,
      status: status ?? this.status,
      message: message ?? this.message,
    );
  }
}
```

### Acciones del flujo:
```dart
// lib/presentation/flows/{feature}/action.dart
sealed class LoginAction extends BaseAction {
  const LoginAction();
}

class UpdateEmail extends LoginAction {
  final String email;
  const UpdateEmail(this.email);
}

class UpdatePassword extends LoginAction {
  final String password;
  const UpdatePassword(this.password);
}

class SubmitLogin extends LoginAction {
  const SubmitLogin();
}
```

---

## üß† Buenas pr√°cticas de dise√±o

- **Abstraer siempre que sea posible**: mover bloques de UI a widgets privados o reutilizables.
- Es preferible tener **muchos widgets peque√±os y limpios** que una `Screen` con c√≥digo largo y dif√≠cil de mantener.
- Seguir el principio de **responsabilidad √∫nica** y mantener la legibilidad.
- Usar `ContentStateWidget` como primer widget para manejo autom√°tico de estados de carga/error.

---

## ‚ö†Ô∏è Evitar

‚ùå Usar `ConsumerWidget` o `HookConsumerWidget` en flows ‚Üí usar `BaseStatefulWidget`.

‚ùå Usar `setState()` en pantallas que ya usan Riverpod.

‚ùå Llamar a servicios directamente desde la pantalla.

‚ùå Omitir el `ContentStateWidget` como primer widget de la pantalla. 